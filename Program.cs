using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment_2
{
    class Program
    {
        static void Main(string[] args)
        {
            string name , desg;
            Console.WriteLine("Enter Name ");
            name = Console.ReadLine();
            short deptno;
            Console.WriteLine("Enter DeptNo ");
            deptno = short.Parse( Console.ReadLine() );

            decimal sal;
            Console.WriteLine("Enter Salary ");
            sal = decimal.Parse(Console.ReadLine());

            Console.WriteLine("Enter Desgination");
            desg = Console.ReadLine();
           

            Manager m1 = new Manager(name,deptno,sal,desg);
            m1.show();
            Console.WriteLine(m1.CalcNetSalary());

            GeneralManager gm1 = new GeneralManager("Janvi", 30,40000, "Delhi", "Accomdation");
            gm1.show();
            Console.WriteLine(gm1.CalcNetSalary());


            Ceo c1 = new Ceo("Amrita",10,10000);
            c1.show();
            Console.WriteLine(c1.CalcNetSalary());

            Console.ReadLine();

        }
    }
    public abstract class Employee
    {
        //string Name -> no blanks
        //int EmpNo -> readonly, autogenerated
        //short DeptNo -> > 0
        //abstract decimal Basic

        private string name;
        public string NAME
        {
            set {
                if (value == "")
                    Console.WriteLine("Invalid Name");
                else
                name = value;
            }
            get { return name; }
        }
        private int empNo;
        public int EMPNO
        {
            get { return empNo; }
        }

        private short deptNo;
        public short DEPTNO
        {
            set { deptNo = value; }
            get { return deptNo; }
        }

      //  private decimal basic;
        public abstract decimal BASIC
        {
            set;
            get;
        }

        private static int eid  = 0;
        public Employee(string name, short deptNo, decimal basic)
        {
            eid++;
            empNo = eid;
            NAME = name;
            DEPTNO = deptNo;
            BASIC = basic;
        }
        public abstract decimal CalcNetSalary();

        public void show()
        {
            Console.WriteLine(EMPNO);
            Console.WriteLine(NAME);
            Console.WriteLine(DEPTNO);
            Console.WriteLine(BASIC);
        }

    }
    public class Manager : Employee
    {
        private string designation;
        private decimal basic;
        public string DESIGNATION
        {
            set
            {
                if (value == "")
                    Console.WriteLine("Invalid DESG");
                else
                    designation = value;
            }
            get { return designation; }
        }
        public Manager(string name, short deptNo, decimal basic , string desg) : base(name,deptNo,basic)
        {
            DESIGNATION = desg;
        }

        public override decimal BASIC
        {
            set {basic = value ; }
            get {return basic; }
        }
        public override decimal CalcNetSalary()
        {
            return BASIC + (BASIC * 20) / 100;
        }
        
    }
    public class GeneralManager : Manager
    {
        private string perks;
        public string PERKS
        {
            set { perks = value; }
            get { return perks; }
        }
        public GeneralManager(string name, short deptNo, decimal basic, string desg, string perks) : base(name , deptNo, basic, desg)
        {
            PERKS = perks;
        }

        public new decimal CalcNetSalary()
        {
            return BASIC + (BASIC * 25) / 100;
        }
    }
    public class Ceo : Employee
    {
        private decimal basic;
        public Ceo(string name, short deptNo, decimal basic) : base(name, deptNo, basic)
        {
          
        }
         public override decimal BASIC
        {
            set { basic = value; }
            get { return basic; }
        }
        public override sealed decimal CalcNetSalary()
        {
            return BASIC + (BASIC * 30) / 100;
        }

    }
}
